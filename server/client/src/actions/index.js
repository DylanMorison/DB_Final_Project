import axios from "axios";
import {
	FETCH_USERS,
	USER_LOGIN,
	USER_LOGOUT,
	ADD_POST,
	DELETE_LIKE,
	ADD_COMMENT,
	CREATE_USER,
	TOGGLE_FOLLOW,
	USER_ADD_POST,
	ADD_LIKE
} from "./types";

export const getAllUsers = () => async (dispatch) => {
	const res = await axios.get("/auth/users");
	dispatch({ type: FETCH_USERS, payload: res.data });
};

export const createUser = (newUserData) => async (dispatch) => {
	const res = await axios.post("/auth/register", newUserData); //creates the user in the DB
	console.log(res);
	console.log("User Created");

	//after your route is finished should return data like this below
	const userAuth = {
		userUid: res.data.insertId //will be generated by backend
	};
	const newUser = {
		userData: {
			username: res.data.username,
			email: res.data.email,
			userUid: res.data.insertId,
			fullName: res.data.fullName,
			followers: [],
			following: [],
			posts: []
		},
		userUid: res.data.insertId
	};

	console.log(newUser);
	dispatch({ type: CREATE_USER, payload: newUser }); //this will be when the user is created and added to redux store

	dispatch({ type: USER_LOGIN, payload: userAuth }); //use USER LOGIN reducer to trigger app login (payload will be res.data)
};

export const logOut = () => async (dispatch) => {
	// const res = await axios.post   # Your DB Call here <---
	console.log("Log Out");

	const emptyState = {
		userUid: null
	};

	dispatch({ type: USER_LOGOUT, payload: emptyState });
};

export const signInUser = (username, password) => async (dispatch) => {
	const res = await axios.post("/auth/login", { username, password });
	console.log("Sign IN");
	console.log(username, " ", password);
	console.log("response in signInUser", res.data);
	if (!res) {
		alert("No Match!");
	}
	debugger;

	const userAuth = {
		userUid: res.data.user_id //will be generated by backend
	};

	const userState = {
		userData: {
			username: res.data.username,
			email: res.data.email,
			userUid: res.data.user_id,
			fullName: res.data.fullName,
			followers: [],
			following: [],
			posts: res.data.userPostsUids
		},
		userUid: res.data.user_id
	};
	dispatch({ type: CREATE_USER, payload: userState }); //this will be when the user is created and added to redux store
	dispatch({ type: USER_LOGIN, payload: userAuth });
	debugger;
	res.data.postDataArray.map((postData) => {
		console.log(postData)
		dispatch({ type: ADD_POST, payload: postData });
	});
};

export const userAddPost = (thisPostData) => async (dispatch) => {
	const res = await axios.post("/api/posts/create", thisPostData);

	const postData = {
		postData: {
			title: res.data.title,
			postUid: res.data.insertId,
			description: res.data.description,
			file: res.data.file,
			thumbnail: res.data.thumbnail,
			authorUid: res.data.authorUid,
			timestamp: res.data.timestamp,
			numLikes: res.data.numLikes,
			numComments: res.data.numComments,
			usersLiked: res.data.usersLiked,
			comments: res.data.comments
		},
		postUid: res.data.insertId
	};
	console.log("add post");
	console.log(postData);
	//parsing of timestamp should occur in backend
	dispatch({ type: ADD_POST, payload: postData });
	//dispatch({ type: USER_ADD_POST, payload: postData });
};

// get all posts done by one user

export const deleteLike = (userLiked, postUid) => (dispatch) => {
	// const res = await axios.post   # Your DB Call here <---
	console.log("delete like");
	const deletedLikeObject = {
		userLiked: userLiked,
		postUid: postUid
	};
	dispatch({ type: DELETE_LIKE, payload: deletedLikeObject });
};

export const addLike = (userLiked, postUid) => (dispatch) => {
	// const res = await axios.post   # Your DB Call here <---
	console.log("add like");
	const likeObject = {
		userLiked: userLiked,
		postUid: postUid
	};
	dispatch({ type: ADD_LIKE, payload: likeObject });
};

export const userAddComment = (thisPostUid, newCommentData) => (dispatch) => {
	// const res = await axios.post   # Your DB Call here <---
	console.log("add comment");
	const payload = {
		commentData: {
			commentAuthorUid: newCommentData.commentAuthorUid,
			commentContents: newCommentData.commentContents
		},
		postUid: thisPostUid
	};
	dispatch({ type: ADD_COMMENT, payload: payload });
};

export const userToggleFollow = (userData, userFollowed) => (dispatch) => {
	// const res = await axios.post   # Your DB Call here <---

	console.log("add comment");
	// dispatch({ type: ADD_COMMENT, payload: postData });
};
